
(include smoothlang/anc2020/iocons  (iocons 2) (iocons_car 1) (iocons_cdr 1))
(include smoothlang/anc2020/numeral (numeral_to_ulint 1) (ulint_to_numeral 1))
(include smoothlang/anc2020/iochar  stdin stdout (cfputc 3) (cfgetc 2))


(: (id x)      x)
(: (drop  a b) b)
(: (drop2 a b) a)

(: (compose f g x)    f (g x))
(: (compose2 f g x y) f ((g x) y))
(: (duply f x)        f x x)
(: (applies x f)      f x)


(: true  drop2)
(: false drop)
(: if    id)


(: (++   n f x) f (n f x))
(: (+  m n f x) n f (m f x))
(: *            compose)
(: square       duply *)


(: 0   drop)
(: 1   ++ 0)
(: 2   ++ 1)
(: 3   ++ 2)
(: 4   ++ 3)
(: 5   ++ 4)
(: 6   ++ 5)
(: 7   ++ 6)
(: 8   ++ 7)
(: 9   ++ 8)
(: 10  ++ 9)

(: 100 square 10)


(: 'H'  + (* 7 10) 2)
(: 'e'  + 100 1)
(: 'l'  + 100 8)
(: 'o'  + 100 (+ 10 1))
(: '\s' + 10 (+ (* 2 10) 2))
(: 'W'  + (* 8 10) 7)
(: 'r'  + 100 (+ 10 4))
(: 'd'  100)
(: '!'  + (* 3 10) 3)
(: '\n' 10)


(: (pair x y z) z x y)
(: fst          applies true)
(: snd          applies false)


(: (cons h t) pair false (pair h t))
(: nil        duply pair true)
(: null?      fst)
(: head       compose fst snd)
(: tail       compose snd snd)

(: (append xs ys) if (null? xs) ys (cons (head xs) (append (tail xs) ys)))
(: (foldr f z xs) if (null? xs) z  (f (head xs) (foldr f z (tail xs))))
(: (map f xs)     if (null? xs) xs (cons (f (head xs)) (map f (tail xs))))
(: (reverse l)    if (null? l)  l  (append (reverse (tail l)) (cons (head l) nil)))


(: return            iocons)
(: sequence_         foldr >> (return nil))
(: (mapM_ f xs)      sequence_ (map f xs))

(: run               applies 0)
(: (bindhelper f v1) f (iocons_car v1) (iocons_cdr v1))
(: (>>= m f)         compose (bindhelper f) m)
(: (>>  m1 m2)       >>= m1 (\ x m2))


(: (fputcc s c)    compose (cfputc c s) ++)
(: (fputc  s)      compose (fputcc s) numeral_to_ulint)
(: putcchar        fputcc stdout)
(: putchar         fputc  stdout)

(: (rewrap-getc i) iocons (ulint_to_numeral (iocons_car i)) (iocons_cdr i))
(: (fgetcc s)      compose (cfgetc s) ++)
(: fgetc           compose2 rewrap-getc fgetcc)
(: getcchar        fgetcc stdin)
(: getchar         fgetc  stdin)

(: fputs           compose mapM_ fputc)
(: fputstr         fputs stdout)

(: (fnewline f)    fputc f '\n')

(: (puts f s)      >> (fputs f s) (fnewline f))
(: putstr          puts stdout)


(: main
  run
    (putstr
      (cons 'H' (cons 'e' (cons 'l' (cons 'l' (cons 'o' (cons '\s'
      (cons 'W' (cons 'o' (cons 'r' (cons 'l' (cons 'd' (cons '!' nil))))))))))))))

(: main1   run (>>= getchar  putchar))

(: main2   run (>>= getcchar putcchar))
