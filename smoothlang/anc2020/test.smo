
(import smoothlang/anc2020/numeral (numeral_to_ulint ulint_to_numeral))
(import smoothlang/anc2020/iocons  (iocons iocons_car iocons_cdr))
(import smoothlang/anc2020/iochar  (stdin stdout cgetc cputc))


(define (id x)      x)
(define (drop  a b) b)
(define (drop2 a b) a)
(define const       drop2)

(define (compose f g x)    f (g x))
(define (compose2 f g x y) f (g x y))
(define (duply f x)        f x x)
(define (applies x f)      f x)


(define true      drop2)
(define false     drop)
(define if        id)
(define (and a b) if a (if b true false) false)


(define (++   n f x) f (n f x))
(define (+  m n f x) n f (m f x))
(define *            compose)
(define (-- n f x)   n (lambda (g h) h (g f)) (const x) id)
(define (-  m n)     n -- m)
(define (<= x y)     false)
(define (>= x y)     false)

(define square       duply *)

(define 0   drop)
(define 1   ++ 0)
(define 2   ++ 1)
(define 3   ++ 2)
(define 4   ++ 3)
(define 5   ++ 4)
(define 6   ++ 5)
(define 7   ++ 6)
(define 8   ++ 7)
(define 9   ++ 8)
(define 10  ++ 9)

(define 32  + (* 3 10) 2)

(define 100 square 10)


(define 'A' + (* 6 10) 5)
(define 'Z' * 10 9)
(define 'a' + (* 9 10) 7)
(define 'z' + 100 (+ (* 2 10) 2))

(define 'H'  + (* 7 10) 2)
(define 'e'  + 100 1)
(define 'l'  + 100 8)
(define 'o'  + 100 (+ 10 1))
(define '\s' + 10 (+ (* 2 10) 2))
(define 'W'  + (* 8 10) 7)
(define 'r'  + 100 (+ 10 4))
(define 'd'  100)
(define '!'  + (* 3 10) 3)
(define '\n' 10)

(define (alpha-lower? x) and (>= x 'a') (<= x 'z'))
(define (alpha-upper? x) and (>= x 'A') (<= x 'Z'))

(define (alpha-downcase x) + x 32)
(define (alpha-upcase   x) - x 32)

(define (tolower x) if (alpha-lower? x) (alpha-downcase x) x)
(define (toupper x) if (alpha-upper? x) (alpha-upcase   x) x)


(define (pair x y z) z x y)
(define fst          applies true)
(define snd          applies false)


(define (cons h t) pair false (pair h t))
(define nil        duply pair true)
(define null?      fst)
(define head       compose fst snd)
(define tail       compose snd snd)

(define (append xs ys) if (null? xs) ys (cons (head xs) (append (tail xs) ys)))
(define (foldr f z xs) if (null? xs) z  (f (head xs) (foldr f z (tail xs))))
(define (map f xs)     if (null? xs) xs (cons (f (head xs)) (map f (tail xs))))
(define (reverse l)    if (null? l)  l  (append (reverse (tail l)) (cons (head l) nil)))


(define string-tolower   map tolower)
(define string-toupper   map toupper)


(define return            iocons)
(define sequence_         foldr >> (return nil))
(define (mapM_ f xs)      sequence_ (map f xs))

(define run               applies 0)
(define (bindhelper f v1) f (iocons_car v1) (iocons_cdr v1))
(define (>>= m f)         compose (bindhelper f) m)
(define (>>  m1 m2)       >>= m1 (lambda x m2))


(define (fputcc s c)    compose (cfputc c s) ++)
(define (fputc  s)      compose (fputcc s) numeral_to_ulint)
(define putcchar        fputcc stdout)
(define putchar         fputc  stdout)

(define (rewrap-getc i) iocons (ulint_to_numeral (iocons_car i)) (iocons_cdr i))
(define (fgetcc s)      compose (cfgetc s) ++)
(define fgetc           compose2 rewrap-getc fgetcc)
(define getcchar        fgetcc stdin)
(define getchar         fgetc  stdin)

(define fputs           compose mapM_ fputc)
(define fputstr         fputs stdout)

(define (fnewline f)    fputc f '\n')
(define fnewline        fnewline stdout)

(define (puts f s)      >> (fputs f s) (fnewline f))
(define putstr          puts stdout)


(define main
  run
    (>>
      iochar_init
      (putstr
        (cons 'H' (cons 'e' (cons 'l' (cons 'l' (cons 'o' (cons '\s'
        (cons 'W' (cons 'o' (cons 'r' (cons 'l' (cons 'd' (cons '!' nil)))))))))))))))

(define main1   run (>>= getchar  putchar))

(define main2   run (>>= getcchar putcchar))

