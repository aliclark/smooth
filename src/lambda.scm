
(define (I x)                x)
(define (K x) (lambda (y)              x))
(define (S f) (lambda (g) (lambda (z)            ((f z) (g z)))))
(define id                   I)
(define (drop a) (lambda (b)           b))
(define (dup     f)          (f f))
(define (applies v) (lambda (f)        (f v)))
(define (rsd3    a) (lambda (b) (lambda (f)      ((f a) b))))
(define (tuck2 f) (lambda (a)          ((f a) f)))
(define (fdup     f) (lambda (a)       ((f a) a)))
(define (fdrop    f) (lambda (a)       f))
(define (fswap    f) (lambda (a) (lambda (b)     ((f b) a))))
(define (ftuck2   f) (lambda (a) (lambda (b)     (((f a) b) a))))
(define (frsd3    f) (lambda (a) (lambda (b) (lambda (c)   (((f c) a) b)))))
(define (frsu3    f) (lambda (a) (lambda (b) (lambda (c)   (((f b) c) a)))))
(define (ftuck3   f) (lambda (a) (lambda (b) (lambda (c)   ((((f a) b) c) a)))))
(define (fcopy3   f) (lambda (a) (lambda (b) (lambda (c)   ((((f c) a) b) c)))))
(define (f2to4    f) (lambda (a) (lambda (b) (lambda (c) (lambda (d) ((f ((f a) b)) ((f c) d)))))))
(define (fcompose f) (lambda (g) (lambda (a)     (f (g a)))))
(define (fxor     f) (lambda (g) (lambda (a) (lambda (b)   ((f ((g b) a)) ((g a) b))))))
(define (fgh      f) (lambda (g) (lambda (h) (lambda (x)   ((f (g x)) (h x))))))

(define drop2                (fswap drop))
(define const                drop2)

(define fixit ((fswap fcompose) dup))
(define fix   ((fcompose dup) fixit))

(define partial id)

(define Y
  (lambda (f)
    ((lambda (x) (f (lambda (v) ((x x) v))))
     (lambda (x) (f (lambda (v) ((x x) v)))))))
